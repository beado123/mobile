// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<RCTScrollView
  style={
    Object {
      "flex": 1,
      "paddingTop": 10,
    }
  }
>
  <View>
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      style={
        Object {
          "fontSize": 20,
          "justifyContent": "center",
          "textAlign": "center",
        }
      }
    >
      following
    </Text>
    <View
      style={
        Array [
          Object {
            "backgroundColor": "#393e42",
            "borderBottomColor": "#000",
            "borderBottomWidth": 1,
            "borderTopColor": "#000",
            "borderTopWidth": 1,
          },
          Object {
            "backgroundColor": "#e1e8ee",
            "borderBottomColor": "#e1e1e1",
            "borderTopColor": "#e1e1e1",
          },
          undefined,
        ]
      }
    >
      <TextInput
        allowFontScaling={true}
        onChangeText={[Function]}
        placeholder="Type Here..."
        placeholderTextColor="#86939e"
        style={
          Array [
            Object {
              "backgroundColor": "#303337",
              "borderRadius": 3,
              "color": "#86939e",
              "fontSize": 17.5,
              "height": 30,
              "margin": 8,
              "overflow": "hidden",
              "paddingLeft": 26,
              "paddingRight": 19,
            },
            Object {
              "backgroundColor": "#bdc6cf",
            },
            false,
            Object {
              "borderRadius": 15,
            },
            undefined,
            undefined,
            false,
          ]
        }
        underlineColorAndroid="transparent"
      />
      <Text
        accessible={true}
        allowFontScaling={false}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "color": "#86939e",
              "fontSize": 16,
            },
            Array [
              Object {
                "backgroundColor": "transparent",
                "position": "absolute",
                "top": 15.5,
              },
              Object {
                "left": 16,
              },
              undefined,
            ],
            Object {
              "fontFamily": "Material Icons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
          ]
        }
      >
        î¢¶
      </Text>
    </View>
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "height": 1334,
          },
          Object {
            "height": 30,
          },
        ]
      }
      virtual={undefined}
    >
      <RCTScrollView
        automaticallyAdjustContentInsets={false}
        contentContainerStyle={undefined}
        contentInset={
          Object {
            "bottom": 0,
          }
        }
        enableAutoAutomaticScroll={true}
        enableResetScrollToCoords={true}
        extraHeight={75}
        extraScrollHeight={0}
        getScrollResponder={[Function]}
        handleOnScroll={[Function]}
        keyboardDismissMode="interactive"
        keyboardOpeningTime={250}
        keyboardShouldPersistTaps="handled"
        keyboardSpace={0}
        onScroll={[Function]}
        resetKeyboardSpace={[Function]}
        resetScrollToCoords={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        scrollEventThrottle={1}
        scrollForExtraHeightOnAndroid={[Function]}
        scrollToEnd={[Function]}
        scrollToFocusedInput={[Function]}
        scrollToPosition={[Function]}
        showsVerticalScrollIndicator={true}
        style={
          Object {
            "backgroundColor": "transparent",
            "flex": 1,
          }
        }
        viewIsInsideTabBar={false}
        virtual={undefined}
      >
        <View>
          <View>
            <View
              accessibilityComponentType={undefined}
              accessibilityLabel={undefined}
              accessibilityTraits={undefined}
              accessible={true}
              collapsable={undefined}
              hasTVPreferredFocus={undefined}
              hitSlop={undefined}
              isTVSelectable={true}
              nativeID={undefined}
              onLayout={undefined}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              style={
                Object {
                  "alignItems": "center",
                  "alignSelf": "flex-start",
                  "backgroundColor": null,
                  "borderBottomWidth": null,
                  "borderColor": "#007aff",
                  "borderLeftWidth": null,
                  "borderRadius": 5,
                  "borderRightWidth": null,
                  "borderTopWidth": null,
                  "elevation": 0,
                  "flexDirection": "row",
                  "height": 45,
                  "justifyContent": "space-between",
                  "opacity": 1,
                  "paddingBottom": 6,
                  "paddingTop": 6,
                  "shadowColor": null,
                  "shadowOffset": null,
                  "shadowOpacity": null,
                  "shadowRadius": null,
                }
              }
              testID={undefined}
              tvParallaxProperties={undefined}
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                note={true}
                style={
                  Array [
                    Object {
                      "backgroundColor": "transparent",
                      "color": "#a7a7a7",
                      "fontFamily": "System",
                      "fontSize": 16,
                      "lineHeight": null,
                      "marginLeft": 0,
                      "marginRight": 0,
                      "paddingLeft": 16,
                      "paddingRight": 16,
                    },
                    undefined,
                    undefined,
                  ]
                }
                uppercase={false}
                virtual={undefined}
              >
                Select One to Sort
              </Text>
            </View>
            <Modal
              animationType="slide"
              hardwareAccelerated={false}
              onRequestClose={[Function]}
              supportedOrientations={null}
              transparent={false}
              visible={false}
            >
              <View
                style={
                  Object {
                    "flex": 1,
                    "height": 1334,
                  }
                }
                virtual={undefined}
              >
                <View>
                  <View
                    style={
                      Object {
                        "backgroundColor": "#F8F8F8",
                        "borderBottomColor": "#a7a6ab",
                        "borderBottomWidth": 0.5,
                        "elevation": 3,
                        "flexDirection": "row",
                        "height": 64,
                        "justifyContent": "center",
                        "left": 0,
                        "paddingLeft": 10,
                        "paddingRight": 10,
                        "paddingTop": 15,
                        "right": 0,
                        "shadowColor": undefined,
                        "shadowOffset": undefined,
                        "shadowOpacity": undefined,
                        "shadowRadius": undefined,
                        "top": 0,
                      }
                    }
                    virtual={undefined}
                  >
                    <View
                      style={
                        Object {
                          "alignItems": "flex-start",
                          "alignSelf": "center",
                          "flex": 1,
                        }
                      }
                      virtual={undefined}
                    >
                      <View
                        accessibilityComponentType={undefined}
                        accessibilityLabel={undefined}
                        accessibilityTraits={undefined}
                        accessible={true}
                        collapsable={undefined}
                        hasTVPreferredFocus={undefined}
                        hitSlop={undefined}
                        isTVSelectable={true}
                        nativeID={undefined}
                        onLayout={undefined}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "alignItems": "center",
                            "alignSelf": null,
                            "backgroundColor": "transparent",
                            "borderBottomWidth": null,
                            "borderColor": null,
                            "borderLeftWidth": null,
                            "borderRadius": 5,
                            "borderRightWidth": null,
                            "borderTopWidth": null,
                            "elevation": 0,
                            "flexDirection": "row",
                            "height": 45,
                            "justifyContent": "space-between",
                            "marginLeft": -3,
                            "opacity": 1,
                            "paddingBottom": 6,
                            "paddingLeft": 6,
                            "paddingRight": 6,
                            "paddingTop": 6,
                            "shadowColor": null,
                            "shadowOffset": null,
                            "shadowOpacity": null,
                            "shadowRadius": null,
                          }
                        }
                        testID={undefined}
                        tvParallaxProperties={undefined}
                      >
                        <Text
                          accessible={true}
                          allowFontScaling={true}
                          ellipsizeMode="tail"
                          style={
                            Object {
                              "backgroundColor": "transparent",
                              "color": "#007aff",
                              "fontFamily": "System",
                              "fontSize": 17,
                              "lineHeight": 19,
                              "marginLeft": 0,
                              "marginRight": 0,
                              "paddingLeft": 16,
                              "paddingRight": 16,
                              "top": undefined,
                            }
                          }
                          uppercase={false}
                          virtual={undefined}
                        >
                          Back
                        </Text>
                      </View>
                    </View>
                    <View
                      style={
                        Object {
                          "alignItems": "center",
                          "alignSelf": "center",
                          "flex": 1,
                        }
                      }
                      virtual={undefined}
                    >
                      <Text
                        accessible={true}
                        allowFontScaling={true}
                        ellipsizeMode="tail"
                        numberOfLines={1}
                        style={
                          Object {
                            "color": "#000",
                            "fontFamily": "System",
                            "fontSize": 17,
                            "fontWeight": "600",
                            "textAlign": "center",
                          }
                        }
                        virtual={undefined}
                      >
                        Select one
                      </Text>
                    </View>
                    <View
                      style={
                        Object {
                          "alignItems": "flex-end",
                          "alignSelf": "center",
                          "flex": 1,
                          "flexDirection": "row",
                          "justifyContent": "flex-end",
                        }
                      }
                      virtual={undefined}
                    />
                  </View>
                </View>
                <RCTScrollView
                  automaticallyAdjustContentInsets={false}
                  contentContainerStyle={undefined}
                  contentInset={
                    Object {
                      "bottom": 0,
                    }
                  }
                  enableAutoAutomaticScroll={true}
                  enableResetScrollToCoords={true}
                  extraHeight={75}
                  extraScrollHeight={0}
                  getScrollResponder={[Function]}
                  handleOnScroll={[Function]}
                  keyboardDismissMode="interactive"
                  keyboardOpeningTime={250}
                  keyboardShouldPersistTaps="handled"
                  keyboardSpace={0}
                  onScroll={[Function]}
                  resetKeyboardSpace={[Function]}
                  resetScrollToCoords={
                    Object {
                      "x": 0,
                      "y": 0,
                    }
                  }
                  scrollEventThrottle={1}
                  scrollForExtraHeightOnAndroid={[Function]}
                  scrollToEnd={[Function]}
                  scrollToFocusedInput={[Function]}
                  scrollToPosition={[Function]}
                  showsVerticalScrollIndicator={true}
                  style={
                    Object {
                      "backgroundColor": "transparent",
                      "flex": 1,
                    }
                  }
                  viewIsInsideTabBar={false}
                  virtual={undefined}
                >
                  <View>
                    <RCTScrollView
                      data={
                        Array [
                          <Item
                            label="followers"
                            value="followers"
                          />,
                          <Item
                            label="create date"
                            value="created_at"
                          />,
                        ]
                      }
                      disableVirtualization={false}
                      getItem={[Function]}
                      getItemCount={[Function]}
                      horizontal={false}
                      initialNumToRender={10}
                      keyExtractor={[Function]}
                      maxToRenderPerBatch={10}
                      numColumns={1}
                      onContentSizeChange={[Function]}
                      onEndReachedThreshold={2}
                      onLayout={[Function]}
                      onMomentumScrollEnd={[Function]}
                      onScroll={[Function]}
                      onScrollBeginDrag={[Function]}
                      onScrollEndDrag={[Function]}
                      renderItem={[Function]}
                      scrollEventThrottle={50}
                      stickyHeaderIndices={Array []}
                      updateCellsBatchingPeriod={50}
                      viewabilityConfigCallbackPairs={Array []}
                      windowSize={21}
                    >
                      <View>
                        <View
                          onLayout={[Function]}
                          style={null}
                        >
                          <View
                            accessibilityComponentType={undefined}
                            accessibilityLabel={undefined}
                            accessibilityTraits={undefined}
                            accessible={true}
                            hasTVPreferredFocus={undefined}
                            hitSlop={undefined}
                            isTVSelectable={true}
                            nativeID={undefined}
                            onLayout={undefined}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={null}
                            testID={undefined}
                            tvParallaxProperties={undefined}
                          >
                            <View
                              button={true}
                              onPress={[Function]}
                              selected={false}
                              style={
                                Object {
                                  "alignItems": "center",
                                  "backgroundColor": "transparent",
                                  "borderBottomWidth": 0.5,
                                  "borderColor": "#c9c9c9",
                                  "flexDirection": "row",
                                  "marginLeft": 16,
                                  "paddingBottom": 13,
                                  "paddingRight": 16,
                                  "paddingTop": 13,
                                }
                              }
                              virtual={undefined}
                            >
                              <Text
                                accessible={true}
                                allowFontScaling={true}
                                ellipsizeMode="tail"
                                style={
                                  Object {
                                    "alignSelf": "center",
                                    "color": "#000",
                                    "fontFamily": "System",
                                    "fontSize": 16,
                                  }
                                }
                                uppercase={false}
                                virtual={undefined}
                              >
                                followers
                              </Text>
                              <View
                                style={
                                  Object {
                                    "alignItems": "flex-end",
                                    "alignSelf": "center",
                                    "flex": 0.28,
                                    "paddingBottom": null,
                                    "paddingLeft": null,
                                    "paddingRight": null,
                                    "paddingTop": null,
                                  }
                                }
                                virtual={undefined}
                              >
                                <View
                                  accessibilityComponentType={undefined}
                                  accessibilityLabel={undefined}
                                  accessibilityTraits={undefined}
                                  accessible={true}
                                  collapsable={undefined}
                                  hasTVPreferredFocus={undefined}
                                  hitSlop={undefined}
                                  isTVSelectable={true}
                                  nativeID={undefined}
                                  onLayout={undefined}
                                  onResponderGrant={[Function]}
                                  onResponderMove={[Function]}
                                  onResponderRelease={[Function]}
                                  onResponderTerminate={[Function]}
                                  onResponderTerminationRequest={[Function]}
                                  onStartShouldSetResponder={[Function]}
                                  style={
                                    Object {
                                      "alignSelf": null,
                                      "opacity": 1,
                                    }
                                  }
                                  testID={undefined}
                                  tvParallaxProperties={undefined}
                                />
                              </View>
                            </View>
                          </View>
                        </View>
                        <View
                          onLayout={[Function]}
                          style={null}
                        >
                          <View
                            accessibilityComponentType={undefined}
                            accessibilityLabel={undefined}
                            accessibilityTraits={undefined}
                            accessible={true}
                            hasTVPreferredFocus={undefined}
                            hitSlop={undefined}
                            isTVSelectable={true}
                            nativeID={undefined}
                            onLayout={undefined}
                            onResponderGrant={[Function]}
                            onResponderMove={[Function]}
                            onResponderRelease={[Function]}
                            onResponderTerminate={[Function]}
                            onResponderTerminationRequest={[Function]}
                            onStartShouldSetResponder={[Function]}
                            style={null}
                            testID={undefined}
                            tvParallaxProperties={undefined}
                          >
                            <View
                              button={true}
                              onPress={[Function]}
                              selected={false}
                              style={
                                Object {
                                  "alignItems": "center",
                                  "backgroundColor": "transparent",
                                  "borderBottomWidth": 0.5,
                                  "borderColor": "#c9c9c9",
                                  "flexDirection": "row",
                                  "marginLeft": 16,
                                  "paddingBottom": 13,
                                  "paddingRight": 16,
                                  "paddingTop": 13,
                                }
                              }
                              virtual={undefined}
                            >
                              <Text
                                accessible={true}
                                allowFontScaling={true}
                                ellipsizeMode="tail"
                                style={
                                  Object {
                                    "alignSelf": "center",
                                    "color": "#000",
                                    "fontFamily": "System",
                                    "fontSize": 16,
                                  }
                                }
                                uppercase={false}
                                virtual={undefined}
                              >
                                create date
                              </Text>
                              <View
                                style={
                                  Object {
                                    "alignItems": "flex-end",
                                    "alignSelf": "center",
                                    "flex": 0.28,
                                    "paddingBottom": null,
                                    "paddingLeft": null,
                                    "paddingRight": null,
                                    "paddingTop": null,
                                  }
                                }
                                virtual={undefined}
                              >
                                <View
                                  accessibilityComponentType={undefined}
                                  accessibilityLabel={undefined}
                                  accessibilityTraits={undefined}
                                  accessible={true}
                                  collapsable={undefined}
                                  hasTVPreferredFocus={undefined}
                                  hitSlop={undefined}
                                  isTVSelectable={true}
                                  nativeID={undefined}
                                  onLayout={undefined}
                                  onResponderGrant={[Function]}
                                  onResponderMove={[Function]}
                                  onResponderRelease={[Function]}
                                  onResponderTerminate={[Function]}
                                  onResponderTerminationRequest={[Function]}
                                  onStartShouldSetResponder={[Function]}
                                  style={
                                    Object {
                                      "alignSelf": null,
                                      "opacity": 1,
                                    }
                                  }
                                  testID={undefined}
                                  tvParallaxProperties={undefined}
                                />
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </RCTScrollView>
                  </View>
                </RCTScrollView>
              </View>
            </Modal>
          </View>
        </View>
      </RCTScrollView>
    </View>
    <View
      style={
        Array [
          Object {
            "backgroundColor": "#ffffff",
            "borderColor": "#bbb",
            "borderTopWidth": 1,
            "marginTop": 20,
          },
          undefined,
        ]
      }
    >
      <RCTScrollView
        data={Array []}
        disableVirtualization={false}
        extraData={
          Object {
            "data": Array [],
            "following": Object {},
            "psw": "",
            "refreshing": false,
            "search": "",
            "sort": undefined,
            "user": "",
            "username": "",
          }
        }
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={false}
        initialNumToRender={10}
        keyExtractor={[Function]}
        maxToRenderPerBatch={10}
        numColumns={1}
        onContentSizeChange={[Function]}
        onEndReachedThreshold={2}
        onLayout={[Function]}
        onMomentumScrollEnd={[Function]}
        onRefresh={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        refreshControl={
          <RefreshControlMock
            onRefresh={[Function]}
            progressViewOffset={undefined}
            refreshing={false}
          />
        }
        refreshing={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        stickyHeaderIndices={Array []}
        updateCellsBatchingPeriod={50}
        viewabilityConfigCallbackPairs={Array []}
        windowSize={21}
      >
        <RCTRefreshControl />
        <View />
      </RCTScrollView>
    </View>
  </View>
</RCTScrollView>
`;
